// Code generated by go-swagger; DO NOT EDIT.

package items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/mintak21/qiitaWrapper/gen/models"
)

// GetMonthlyTrendItemsOKCode is the HTTP code returned for type GetMonthlyTrendItemsOK
const GetMonthlyTrendItemsOKCode int = 200

/*GetMonthlyTrendItemsOK OK

swagger:response getMonthlyTrendItemsOK
*/
type GetMonthlyTrendItemsOK struct {

	/*
	  In: Body
	*/
	Payload *models.Items `json:"body,omitempty"`
}

// NewGetMonthlyTrendItemsOK creates GetMonthlyTrendItemsOK with default headers values
func NewGetMonthlyTrendItemsOK() *GetMonthlyTrendItemsOK {

	return &GetMonthlyTrendItemsOK{}
}

// WithPayload adds the payload to the get monthly trend items o k response
func (o *GetMonthlyTrendItemsOK) WithPayload(payload *models.Items) *GetMonthlyTrendItemsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get monthly trend items o k response
func (o *GetMonthlyTrendItemsOK) SetPayload(payload *models.Items) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMonthlyTrendItemsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMonthlyTrendItemsBadRequestCode is the HTTP code returned for type GetMonthlyTrendItemsBadRequest
const GetMonthlyTrendItemsBadRequestCode int = 400

/*GetMonthlyTrendItemsBadRequest Bad Request

swagger:response getMonthlyTrendItemsBadRequest
*/
type GetMonthlyTrendItemsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetMonthlyTrendItemsBadRequest creates GetMonthlyTrendItemsBadRequest with default headers values
func NewGetMonthlyTrendItemsBadRequest() *GetMonthlyTrendItemsBadRequest {

	return &GetMonthlyTrendItemsBadRequest{}
}

// WithPayload adds the payload to the get monthly trend items bad request response
func (o *GetMonthlyTrendItemsBadRequest) WithPayload(payload *models.Error) *GetMonthlyTrendItemsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get monthly trend items bad request response
func (o *GetMonthlyTrendItemsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMonthlyTrendItemsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMonthlyTrendItemsInternalServerErrorCode is the HTTP code returned for type GetMonthlyTrendItemsInternalServerError
const GetMonthlyTrendItemsInternalServerErrorCode int = 500

/*GetMonthlyTrendItemsInternalServerError Internal Server Error

swagger:response getMonthlyTrendItemsInternalServerError
*/
type GetMonthlyTrendItemsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetMonthlyTrendItemsInternalServerError creates GetMonthlyTrendItemsInternalServerError with default headers values
func NewGetMonthlyTrendItemsInternalServerError() *GetMonthlyTrendItemsInternalServerError {

	return &GetMonthlyTrendItemsInternalServerError{}
}

// WithPayload adds the payload to the get monthly trend items internal server error response
func (o *GetMonthlyTrendItemsInternalServerError) WithPayload(payload *models.Error) *GetMonthlyTrendItemsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get monthly trend items internal server error response
func (o *GetMonthlyTrendItemsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMonthlyTrendItemsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
