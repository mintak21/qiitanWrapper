// Code generated by go-swagger; DO NOT EDIT.

package items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetTagItemsHandlerFunc turns a function with the right signature into a get tag items handler
type GetTagItemsHandlerFunc func(GetTagItemsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTagItemsHandlerFunc) Handle(params GetTagItemsParams) middleware.Responder {
	return fn(params)
}

// GetTagItemsHandler interface for that can handle valid get tag items params
type GetTagItemsHandler interface {
	Handle(GetTagItemsParams) middleware.Responder
}

// NewGetTagItems creates a new http.Handler for the get tag items operation
func NewGetTagItems(ctx *middleware.Context, handler GetTagItemsHandler) *GetTagItems {
	return &GetTagItems{Context: ctx, Handler: handler}
}

/*GetTagItems swagger:route GET /items/{tag} items getTagItems

指定したタグの記事の取得

指定したタグの記事の取得。1度に取得する件数は100固定。

*/
type GetTagItems struct {
	Context *middleware.Context
	Handler GetTagItemsHandler
}

func (o *GetTagItems) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTagItemsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
