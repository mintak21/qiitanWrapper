// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Item item
//
// swagger:model Item
type Item struct {

	// 投稿日時
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// 記事のリンクURL
	Link string `json:"link,omitempty"`

	// statistics
	Statistics *Statistics `json:"statistics,omitempty"`

	// 目次
	TableContents string `json:"table_contents,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// 記事のタイトル
	Title string `json:"title,omitempty"`

	// user
	User *User `json:"user,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *Item) UnmarshalJSON(data []byte) error {
	var props struct {

		// 投稿日時
		// Format: date-time
		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		// 記事のリンクURL
		Link string `json:"link,omitempty"`

		// statistics
		Statistics *Statistics `json:"statistics,omitempty"`

		// 目次
		TableContents string `json:"table_contents,omitempty"`

		// tags
		Tags []string `json:"tags"`

		// 記事のタイトル
		Title string `json:"title,omitempty"`

		// user
		User *User `json:"user,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.CreatedAt = props.CreatedAt
	m.Link = props.Link
	m.Statistics = props.Statistics
	m.TableContents = props.TableContents
	m.Tags = props.Tags
	m.Title = props.Title
	m.User = props.User
	return nil
}

// Validate validates this item
func (m *Item) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.Statistics) { // not required
		return nil
	}

	if m.Statistics != nil {
		if err := m.Statistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics")
			}
			return err
		}
	}

	return nil
}

func (m *Item) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Item) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Item) UnmarshalBinary(b []byte) error {
	var res Item
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
