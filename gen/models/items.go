// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Items items
//
// swagger:model Items
type Items struct {

	// 次のページがあるかどうか
	HasNext bool `json:"has_next"`

	// items
	Items []*Item `json:"items"`

	// 現在のページ
	Page int64 `json:"page"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *Items) UnmarshalJSON(data []byte) error {
	var props struct {

		// 次のページがあるかどうか
		HasNext bool `json:"has_next"`

		// items
		Items []*Item `json:"items"`

		// 現在のページ
		Page int64 `json:"page"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.HasNext = props.HasNext
	m.Items = props.Items
	m.Page = props.Page
	return nil
}

// Validate validates this items
func (m *Items) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Items) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Items) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Items) UnmarshalBinary(b []byte) error {
	var res Items
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
