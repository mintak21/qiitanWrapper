name: Unit Test and Check Docker Image

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  unit-test:
    name: Unit Test
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v2

      - name: Set up Golang
        id: setup
        uses: actions/setup-go@v1
        with:
          go-version: 1.14

      - name: Execute Unit Test
        id: test
        run: echo dummy test done

      - name: Branch name
        id: branch_name
        run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
      - name: echo name
        run: |
          echo $SOURCE_NAME
          echo $SOURCE_BRANCH
          echo $SOURCE_TAG
        env:
          SOURCE_NAME: ${{ steps.branch_name.outputs.SOURCE_NAME }}
          SOURCE_BRANCH: ${{ steps.branch_name.outputs.SOURCE_BRANCH }}
          SOURCE_TAG: ${{ steps.branch_name.outputs.SOURCE_TAG }}

  scan:
    name: Scan Image
    runs-on: ubuntu-18.04
    needs: unit-test
    strategy:
      fail-fast: false
      matrix:
        service: [api, ci-test]

    steps:
      - name: Setup Go
        id: setup
        uses: actions/setup-go@v1
        with:
          go-version: 1.14

      - name: Install Dockle
        env:
          DOCKLE_VERSION: 0.2.4
        run: |
          curl -L -o dockle.deb https://github.com/goodwithtech/dockle/releases/download/v${DOCKLE_VERSION}/dockle_${DOCKLE_VERSION}_Linux-64bit.deb
          sudo dpkg -i dockle.deb
          rm dockle.deb

      - name: Checkout code
        id: checkout
        uses: actions/checkout@v2

      - name: Build image from Dockerfile
        id: build
        run: |
          TAG="${{ matrix.service }}:ci"
          docker build -f deployment/dockerfile/${{ matrix.service }}/Dockerfile -t ${TAG} .
          echo "::set-output name=tag::${TAG}"

      - name: Run Vulnerability Scanner
        id: scan-vulnerability
        uses: aquasecurity/trivy-action@0.0.8
        with:
          image-ref: ${{ steps.build.outputs.tag }}
          format: table
          exit-code: 1
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

      - name: Run Security Scanner
        id: scan-security
        run: |
          dockle --exit-code 1 --exit-level warn ${{ steps.build.outputs.tag }}

      # ベータ版のようだが、TrivyとDockleの2つを使ってチェックしてくれるAction
      - name: Run Beta Container Scanner
        id: beta-scanner
        uses: Azure/container-scan@v0
        with:
          image-name: ${{ steps.build.outputs.tag }}
          run-quality-checks: true
          severity-threshold: HIGH

  push:
    name: Push Image To ECR
    runs-on: ubuntu-18.04
    needs: [unit-test, scan]
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        service: [api, ci-test]
    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: aws-cred
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mintak/qiitawrapper/${{ matrix.service }}
          DOCKER_FILE: deployment/dockerfile/${{ matrix.service }}/Dockerfile
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ${DOCKER_FILE} -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

      - name: Logout From Amazon ECR
        id: logout-ecr
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
