name: Unit Test and Check Docker Image

on:
  pull_request:

jobs:
  lint:
    name: Go Lint
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v2

      - name: Lint
        id: lint
        uses: reviewdog/action-golangci-lint@v1
        with:
          golangci_lint_flags: "-c .golangci.yml"
          reporter: github-pr-review
          filter_mode: file
          fail_on_error: true

  unit-test:
    name: Unit Test
    runs-on: ubuntu-18.04
    steps:
      - name: Set up Golang
        id: setup
        uses: actions/setup-go@v1
        with:
          go-version: 1.14

      - name: Checkout code
        id: checkout
        uses: actions/checkout@v2

      - name: Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Unit Test
        id: test
        run: go test ./... -cover

  scan:
    name: Scan Image
    needs: [lint, unit-test]
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        service: [api, ci-test]

    steps:
      # - name: Setup Go
      #   id: setup
      #   uses: actions/setup-go@v1
      #   with:
      #     go-version: 1.14

      # - name: Install Dockle
      #   env:
      #     DOCKLE_VERSION: 0.2.4
      #   run: |
      #     curl -L -o dockle.deb https://github.com/goodwithtech/dockle/releases/download/v${DOCKLE_VERSION}/dockle_${DOCKLE_VERSION}_Linux-64bit.deb
      #     sudo dpkg -i dockle.deb
      #     rm dockle.deb

      - name: Checkout code
        id: checkout
        uses: actions/checkout@v2

      - name: Build image from Dockerfile
        id: build
        run: |
          TAG="${{ matrix.service }}:ci"
          docker build -f deployment/dockerfile/${{ matrix.service }}/Dockerfile -t ${TAG} .
          echo "::set-output name=tag::${TAG}"

      # - name: Run Vulnerability Scanner
      #   id: scan-vulnerability
      #   uses: aquasecurity/trivy-action@0.0.8
      #   with:
      #     image-ref: ${{ steps.build.outputs.tag }}
      #     format: table
      #     exit-code: 1
      #     ignore-unfixed: true
      #     severity: "CRITICAL,HIGH"

      # - name: Run Security Scanner
      #   id: scan-security
      #   run: |
      #     dockle --exit-code 1 --exit-level warn ${{ steps.build.outputs.tag }}

      # ベータ版のようだが、TrivyとDockleの2つを使ってチェックしてくれるAction
      - name: Run Beta Container Scanner
        id: beta-scanner
        uses: Azure/container-scan@v0
        with:
          image-name: ${{ steps.build.outputs.tag }}
          run-quality-checks: true
          severity-threshold: HIGH
