name: Build And Push Docker Image

on:
  push:
    branches:
      - master
  pull_request:

env:
  DOCKER_BUILDKIT: 1

jobs:
  build:
    name: Build And Push Docker Image
    runs-on: ubuntu-18.04
    #if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        service: [api, ci-test]

    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v2

      - name: Get Version
        id: version
        run: |
          echo ::set-output name=source_branch::${GITHUB_REF#refs/heads/}
          echo ::set-output name=source_tag::${GITHUB_REF#refs/tags/}

      - name: Configure AWS credentials
        id: aws-cred
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Cache Docker Image
        id: cache
        uses: actions/cache@v2
        with:
          path: /tmp/cache
          key: ${{ runner.os }}-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.service }}-

      - name: Build and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mintak/qiitawrapper/${{ matrix.service }}
          DOCKER_FILE: deployment/dockerfile/${{ matrix.service }}/Dockerfile
          #IMAGE_TAG: ${{ steps.version.outputs.source_branch }}-${{ github.sha }}
          IMAGE_TAG: test
        run: |
          docker build -f ${DOCKER_FILE} -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

      - name: Logout From Amazon ECR
        id: logout-ecr
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
